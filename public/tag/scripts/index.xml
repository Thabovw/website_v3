<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Scripts | Thabo J. van Woudenberg</title>
    <link>https://www.tvanwoudenberg.com/tag/scripts/</link>
      <atom:link href="https://www.tvanwoudenberg.com/tag/scripts/index.xml" rel="self" type="application/rss+xml" />
    <description>Scripts</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><copyright>Thabo J. van Woudenberg © 2020</copyright><lastBuildDate>Fri, 30 Aug 2019 00:00:00 +0000</lastBuildDate>
    <image>
      <url>https://www.tvanwoudenberg.com/images/icon_hu0b7a4cb9992c9ac0e91bd28ffd38dd00_9727_512x512_fill_lanczos_center_2.png</url>
      <title>Scripts</title>
      <link>https://www.tvanwoudenberg.com/tag/scripts/</link>
    </image>
    
    <item>
      <title>Custom function for Jaccard Index in Igraph</title>
      <link>https://www.tvanwoudenberg.com/post/custom-function-for-jaccard-index-in-igraph/</link>
      <pubDate>Fri, 30 Aug 2019 00:00:00 +0000</pubDate>
      <guid>https://www.tvanwoudenberg.com/post/custom-function-for-jaccard-index-in-igraph/</guid>
      <description>


&lt;p&gt;Hi all!&lt;/p&gt;
&lt;p&gt;I while ago, I had the problem that I wanted to compare the edges between two different time points, but also the edges of different types of networks. To be more specific, I wanted to compare:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The edges of the same network between different waves&lt;/li&gt;
&lt;li&gt;The edges in social network based on a nomination question (“With whom do you spend time during the breaks at school”) to the edges based on Bluetooth connects of participants’ smartphones&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For more information, see the &lt;a href=&#34;https://bmcpublichealth.biomedcentral.com/articles/10.1186/s12889-018-5353-5#Sec4&#34;&gt;protocol paper of the project&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;However, I could not find a function in the igrapgh package that I could use for this. Therefore, I created a custom function that i want to share with you:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Function for Jaccard index
jaccard_index&amp;lt;-function(g1,g2) {
  library(igraph)
  g1&amp;lt;-get.adjacency(g1)
  g1[g1 &amp;gt; 0.001] &amp;lt;- 1
  g2&amp;lt;-get.adjacency(g2)
  g2[g2 &amp;gt; 0.001] &amp;lt;- 1
  A&amp;lt;-sum(g1 != g2) # edges that changed (0-&amp;gt;1 and 1-&amp;gt;0)
  B&amp;lt;-sum(g1 * g2) # edges that have a 1 in M1 and 1 in M2, so stayed the same (1-&amp;gt;1)
  return(round(B/sum(A,B),digits = 2)) # the ratio of stable ties ties (B), compared to all ties who change (A) + stable ties (B)
  on.exit(rm(A,B))
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I can understand that you think this doesn’t work. So let me show you.&lt;/p&gt;
&lt;p&gt;I first created an empty matrix from ten by ten (as if there are 10 participants in this network), and randomly added 13 edges.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;set.seed(1337)
Test_Network_1&amp;lt;-matrix(nrow = 10, ncol = 10)    # 1 row and 1 column per participant
for (i in sample(1:10,13,replace=T)) {          # randomly select a number between 1 and 10, and the same numbers can be used multiple times. We do this 13 times 
  Test_Network_1[i,sample(1:10,1,replace=T)]&amp;lt;-1 # for each randomly selected participant, randomly assign and alter (again, between 1 and 10) to create an edge
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let us inspect the matrix and count the number of nominations in this matrix by hand (should be 13).&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;print(Test_Network_1)
##       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10]
##  [1,]   NA   NA   NA   NA   NA   NA    1   NA   NA    NA
##  [2,]   NA   NA   NA   NA   NA   NA   NA    1    1    NA
##  [3,]   NA   NA    1   NA   NA    1   NA   NA   NA    NA
##  [4,]   NA   NA   NA    1   NA   NA   NA   NA   NA    NA
##  [5,]   NA   NA   NA   NA   NA   NA   NA    1   NA    NA
##  [6,]   NA    1   NA   NA   NA   NA   NA   NA   NA    NA
##  [7,]   NA   NA   NA   NA   NA   NA   NA   NA   NA    NA
##  [8,]   NA   NA   NA   NA    1   NA   NA   NA    1    NA
##  [9,]   NA   NA    1   NA   NA   NA   NA   NA    1    NA
## [10,]   NA    1   NA   NA   NA   NA   NA   NA   NA    NA&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Or ask R to do it for us.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;sum(Test_Network_1,na.rm=TRUE)
## [1] 13&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The make a partial overlapping network, we use the first example matrix and create a second:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;Test_Network_2&amp;lt;-Test_Network_1&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But these matrices will be identical! Therefore, so let’s delete some edges in both the networks.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# delete some edges in the first network
Test_Network_1[2,8]&amp;lt;-NA
Test_Network_1[10,2]&amp;lt;-NA
Test_Network_1[9,9]&amp;lt;-NA

# delete some edges in the second network
Test_Network_2[3,3]&amp;lt;-NA
Test_Network_2[4,4]&amp;lt;-NA
Test_Network_2[3,6]&amp;lt;-NA
Test_Network_2[8,5]&amp;lt;-NA&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The first network should have 10 edges: 13 original edges, but we deleted 3 of them&lt;/p&gt;
&lt;p&gt;The second network should have 9: 13 original edges, but we deleted 4 of them&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# sum of network 1 should be 13-3 = 10
sum(Test_Network_1,na.rm=TRUE)
## [1] 10

# sum of network 2 should be 13-4 = 9
sum(Test_Network_2,na.rm=TRUE)
## [1] 9&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This means that networks share 6 edges: 13 original edges, deleted 3 and 4 of them.&lt;/p&gt;
&lt;p&gt;And if we know the shared edges, we also know the unique edges per network:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# sum of edges in both graphs should be 13-3-4 = 6
sum(Test_Network_1==Test_Network_2,na.rm=TRUE)
## [1] 6

# the first example network
sum(Test_Network_1,na.rm=TRUE)-sum(Test_Network_1==Test_Network_2,na.rm=TRUE)
## [1] 4

# the second example network
sum(Test_Network_2,na.rm=TRUE)-sum(Test_Network_1==Test_Network_2,na.rm=TRUE)
## [1] 3&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;OK, so there are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;6 shared edges&lt;/li&gt;
&lt;li&gt;4 unique edges in network 1&lt;/li&gt;
&lt;li&gt;3 unique edges in network 2&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If we would calculate the Jaccard index by hand:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# plug in the numbers
shared &amp;lt;-6
unique_N1&amp;lt;-4
unique_N2&amp;lt;-3

# calculate the ratio of share edges in comparison to all edges:
shared/(shared+unique_N1+unique_N2)
## [1] 0.4615385&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The result is that 46.15% of all edges is observed in both networks&lt;/p&gt;
&lt;p&gt;Now lets see if the custom function produces the same number for the Igraph objects
We have the example matrices, let’s make two igraph objects:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# make a network out of the matrices
library(igraph)
## 
## Attaching package: &amp;#39;igraph&amp;#39;
## The following objects are masked from &amp;#39;package:stats&amp;#39;:
## 
##     decompose, spectrum
## The following object is masked from &amp;#39;package:base&amp;#39;:
## 
##     union
Test_Graph_1&amp;lt;-graph_from_adjacency_matrix(Test_Network_1, mode = c(&amp;quot;directed&amp;quot;))
Test_Graph_2&amp;lt;-graph_from_adjacency_matrix(Test_Network_2, mode = c(&amp;quot;directed&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let’s see whether the example script works:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# test of the function
jaccard_index(Test_Graph_1,Test_Graph_2)
## [1] 0.46&lt;/code&gt;&lt;/pre&gt;
&lt;p align=&#34;center&#34;&gt;
&lt;img src=&#34;https://media.giphy.com/media/ZdFxoPhIS4glG/giphy.gif&#34; width=&#34;400&#34; height=&#34;200&#34;&gt;
&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Apparently, you have to put gifs in your Rscripts. I like this one because the girl is hardcore.&lt;/em&gt;&lt;/p&gt;
&lt;div id=&#34;weighted-networks&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Weighted networks&lt;/h3&gt;
&lt;p&gt;That is nice and all, but wat about waited networks? Also, I also wanted to understand where the changes between the ties were coming from. In other words, is one network overestimating the other?&lt;/p&gt;
&lt;p&gt;The second custom function:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;jaccard_change&amp;lt;-function(g1,g2) {
  library(igraph)
  g1&amp;lt;-get.adjacency(g1)
  g1[g1 &amp;gt; 0.001] &amp;lt;- 1
  g2&amp;lt;-get.adjacency(g2)
  g2[g2 &amp;gt; 0.001] &amp;lt;- 1
  Title&amp;lt;-&amp;quot;Numbers represent edges&amp;quot;
  Left&amp;lt;-sum(g1 &amp;gt; g2) # edges that changed (1-&amp;gt;0)
  Right&amp;lt;-sum(g1 &amp;lt; g2) # edges that changed (0-&amp;gt;1)
  Both&amp;lt;-sum(g1 * g2) # edges that have a 1 in M1 and 1 in M2, so stayed the same (1-&amp;gt;1)
  Index&amp;lt;-round(Both/sum(Left,Right,Both),digits = 2) # the ratio of stable ties ties (B), compared to all ties who change (A) + stable ties (B)
  Results&amp;lt;-return(structure(list(Title,Index,Left,Right,Both),names=c(&amp;quot;Title&amp;quot;,&amp;quot;Jaccard_Index&amp;quot;,&amp;quot;Left_Network_Only&amp;quot;, &amp;quot;Right_Network_Only&amp;quot;, &amp;quot;Both_Networks&amp;quot;)))
  on.exit(rm(Left,Right,Both,Index))
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;First, let’s test the weighted networks. We make a new network based on the first one&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;Test_Network_3&amp;lt;-Test_Network_1
print(Test_Network_3)
##       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10]
##  [1,]   NA   NA   NA   NA   NA   NA    1   NA   NA    NA
##  [2,]   NA   NA   NA   NA   NA   NA   NA   NA    1    NA
##  [3,]   NA   NA    1   NA   NA    1   NA   NA   NA    NA
##  [4,]   NA   NA   NA    1   NA   NA   NA   NA   NA    NA
##  [5,]   NA   NA   NA   NA   NA   NA   NA    1   NA    NA
##  [6,]   NA    1   NA   NA   NA   NA   NA   NA   NA    NA
##  [7,]   NA   NA   NA   NA   NA   NA   NA   NA   NA    NA
##  [8,]   NA   NA   NA   NA    1   NA   NA   NA    1    NA
##  [9,]   NA   NA    1   NA   NA   NA   NA   NA   NA    NA
## [10,]   NA   NA   NA   NA   NA   NA   NA   NA   NA    NA&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;now we will give the some existing edges some more weight&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;Test_Network_3[1,7]&amp;lt;-2
Test_Network_3[6,2]&amp;lt;-3
Test_Network_3[9,3]&amp;lt;-4

# show the new network
print(Test_Network_3)
##       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10]
##  [1,]   NA   NA   NA   NA   NA   NA    2   NA   NA    NA
##  [2,]   NA   NA   NA   NA   NA   NA   NA   NA    1    NA
##  [3,]   NA   NA    1   NA   NA    1   NA   NA   NA    NA
##  [4,]   NA   NA   NA    1   NA   NA   NA   NA   NA    NA
##  [5,]   NA   NA   NA   NA   NA   NA   NA    1   NA    NA
##  [6,]   NA    3   NA   NA   NA   NA   NA   NA   NA    NA
##  [7,]   NA   NA   NA   NA   NA   NA   NA   NA   NA    NA
##  [8,]   NA   NA   NA   NA    1   NA   NA   NA    1    NA
##  [9,]   NA   NA    4   NA   NA   NA   NA   NA   NA    NA
## [10,]   NA   NA   NA   NA   NA   NA   NA   NA   NA    NA&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Make an Igraph object&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;Test_Graph_3&amp;lt;-graph_from_adjacency_matrix(Test_Network_3, mode = c(&amp;quot;directed&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This network is identical in the edges, except that some of the edges have a different weight.&lt;/p&gt;
&lt;p&gt;The Jaccard index should be 1, given that all the edges appear in both networks.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;jaccard_change(Test_Graph_1,Test_Graph_3)
## $Title
## [1] &amp;quot;Numbers represent edges&amp;quot;
## 
## $Jaccard_Index
## [1] 1
## 
## $Left_Network_Only
## [1] 0
## 
## $Right_Network_Only
## [1] 0
## 
## $Both_Networks
## [1] 10&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It works!&lt;/p&gt;
&lt;p&gt;Now add some more edges to the third example network&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;Test_Network_3[1,2]&amp;lt;-4
Test_Network_3[3,5]&amp;lt;-2
Test_Network_3[6,10]&amp;lt;-3

# show the new network
print(Test_Network_3)
##       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10]
##  [1,]   NA    4   NA   NA   NA   NA    2   NA   NA    NA
##  [2,]   NA   NA   NA   NA   NA   NA   NA   NA    1    NA
##  [3,]   NA   NA    1   NA    2    1   NA   NA   NA    NA
##  [4,]   NA   NA   NA    1   NA   NA   NA   NA   NA    NA
##  [5,]   NA   NA   NA   NA   NA   NA   NA    1   NA    NA
##  [6,]   NA    3   NA   NA   NA   NA   NA   NA   NA     3
##  [7,]   NA   NA   NA   NA   NA   NA   NA   NA   NA    NA
##  [8,]   NA   NA   NA   NA    1   NA   NA   NA    1    NA
##  [9,]   NA   NA    4   NA   NA   NA   NA   NA   NA    NA
## [10,]   NA   NA   NA   NA   NA   NA   NA   NA   NA    NA&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The third network (right in the function) will now have three unique edges that are not in the first example network (left network)&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;Test_Graph_3&amp;lt;-graph_from_adjacency_matrix(Test_Network_3, mode = c(&amp;quot;directed&amp;quot;))

jaccard_change(Test_Graph_1,Test_Graph_3)
## $Title
## [1] &amp;quot;Numbers represent edges&amp;quot;
## 
## $Jaccard_Index
## [1] 0.77
## 
## $Left_Network_Only
## [1] 0
## 
## $Right_Network_Only
## [1] 3
## 
## $Both_Networks
## [1] 10&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The output tells us what we want to hear:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;10 shared edges&lt;/li&gt;
&lt;li&gt;0 unique edges in network 1 (the left network)&lt;/li&gt;
&lt;li&gt;3 unique edges in network 2 (the right network)&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# plug in the numbers
shared &amp;lt;-10
unique_N1&amp;lt;-3
unique_N2&amp;lt;-0

# calculate the ratio of share edges in comparison to all edges:
shared/(shared+unique_N1+unique_N2)
## [1] 0.7692308&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Fiewww, still the correct Jaccard index. Time for my holiday!&lt;/p&gt;
&lt;p align=&#34;center&#34;&gt;
&lt;img src=&#34;https://media.giphy.com/media/VWIMImeOgPZTi/giphy.gif&#34; width=&#34;400&#34; height=&#34;200&#34;&gt;
&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>
